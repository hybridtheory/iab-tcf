package iab_tcf

import (
	"time"

	"github.com/montanaflynn/stats"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"github.com/onsi/gomega/gmeasure"
)

type data struct {
	consent string
	result  string
}

var _ = Describe("performance", func() {
	var (
		experiment    *gmeasure.Experiment
		times         = gmeasure.SamplingConfig{N: 1000}
		testConsentV1 = data{
			consent: "BOlLbqtOlLbqtAVABADECg-AAAApp7v______9______9uz_Ov_v_f__33e8__9v_l_7_-___u_-3zd4u_1vf99yfm1-7etr3tp_87ues2_Xur__79__3z3_9phP78k89r7337Ew-v02",
			result
		}
		testConsentV2 = data{
			consent: "COxR03kOxR1CqBcABCENAgCMAP_AAH_AAAqIF3EXySoGY2thI2YVFxBEIYwfJxyigMgChgQIsSwNQIeFLBoGLiAAHBGYJAQAGBAEEACBAQIkHGBMCQAAgAgBiRCMQEGMCzNIBIBAggEbY0FACCVmHkHSmZCY7064O__QLuIJEFQMAkSBAIACLECIQwAQDiAAAYAlAAABAhIaAAgIWBQEeAAAACAwAAgAAABBAAACAAQAAICIAAABAAAgAiAQAAAAGgIQAACBABACRIAAAEANCAAgiCEAQg4EAo4AAA",
			result
		}
	)

	BeforeEach(func() {
		experiment = gmeasure.NewExperiment("consent speed")
	})

	Context("custom parser", func() {
		var run = func(consent string, expected string) func(_ int) {
			return func(_ int) {
				output, err := NewConsent(consent)
				Expect(err).NotTo(HaveOccurred())
				Expect(output.GetConsentBitstring()).To(Equal(expected))
			}
		}

		var assert = func() {
			measurements := experiment.Get("runtime")
			p99, _ := stats.Percentile(stats.LoadRawData(measurements.Durations), 99)
			Expect(p99).Should(BeNumerically("<", 2000*time.Millisecond), "it shouldn't take too long.")
		}

		It("is fast with v1", func() {
			experiment.SampleDuration("runtime", run(testConsentV1.consent, testConsentV1.result), times)
			assert()
		})

		It("is fast with v2", func() {
			experiment.SampleDuration("runtime", run(testConsentV2.consent, testConsentV2.result), times)
			assert()
		})
	})
})
